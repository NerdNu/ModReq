package nu.nerd.modreq.database;

import com.j256.ormlite.field.DatabaseField;
import com.j256.ormlite.table.DatabaseTable;

import java.util.UUID;

/**
 * Represents the request table in the database.
 *
 * @version 1.0
 * @since 3.0
 */
@DatabaseTable(tableName = "modreq_requests")
public class Request {

	public enum RequestStatus {
		/**
		 * The request has been resolved and is closed.
		 */
		CLOSED,

		/**
		 * The request has been claimed by a moderator.
		 */
		CLAIMED,

		/**
		 * The request has yet to be handled and can be claimed.
		 */
		OPEN
	}

	// ----------------------------------------------------------------------------

	/**
	 * The unique identifier for this request.
	 * This field is automatically generated by the database.
	 */
	@DatabaseField(generatedId = true)
	private int id;

	/**
	 * The UUID of the player who created this request.
	 * This field cannot be null.
	 */
	@DatabaseField(canBeNull = false)
	private UUID playerUUID;

	/**
	 * The username of the player who created this request.
	 * This field cannot be null.
	 */
	@DatabaseField(canBeNull = false)
	private String playerName;

	/**
	 * The UUID of the moderator assigned to handle this request.
	 * This field can be null if no moderator has been assigned yet.
	 */
	@DatabaseField
	private UUID assignedModUUID;

	/**
	 * The username of the moderator assigned to handle this request.
	 * This field can be null if no moderator has been assigned yet.
	 */
	@DatabaseField
	private String assignedMod;

	/**
	 * The content of the request submitted by the player.
	 * This field can be null if the request was created but not yet filled with content.
	 */
	@DatabaseField
	private String request;

	/**
	 * The timestamp (in milliseconds since epoch) when this request was created.
	 * This field cannot be null.
	 */
	@DatabaseField(canBeNull = false)
	private long requestTime;

	/**
	 * The current status of this request (e.g., OPEN, IN_PROGRESS, CLOSED).
	 * This field cannot be null.
	 */
	@DatabaseField(canBeNull = false)
	private RequestStatus status;

	/**
	 * The location information associated with this request.
	 * This can represent in-game coordinates or other location identifiers.
	 * This field cannot be null.
	 */
	@DatabaseField(canBeNull = false)
	private String requestLocation;

	/**
	 * The message provided when closing this request.
	 * This field can be null if the request has not been closed or no message was provided.
	 */
	@DatabaseField
	private String closeMessage;

	/**
	 * The timestamp (in milliseconds since epoch) when this request was closed.
	 * A value of 0 indicates the request has not been closed yet.
	 */
	@DatabaseField
	private long closeTime;

	/**
	 * Indicates whether the player has seen the closing message.
	 * True if the player has acknowledged the request closure, false otherwise.
	 */
	@DatabaseField
	private boolean closeSeenByUser;

	/**
	 * Indicates whether this request has been flagged for administrator attention.
	 * True if the request requires admin intervention, false otherwise.
	 */
	@DatabaseField
	private boolean flagForAdmin;

	// ----------------------------------------------------------------------------

	/**
	 * Default constructor for creating an empty Request object.
	 */
	public Request() {}

	// ----------------------------------------------------------------------------

	/**
	 * Sets the unique identifier for this request.
	 *
	 * @param id The integer ID to set for this request
	 */
	public void setId(int id) {
		this.id = id;
	}

	/**
	 * Gets the unique identifier for this request.
	 *
	 * @return The integer ID of this request
	 */
	public int getId() {
		return this.id;
	}

	/**
	 * Sets the UUID of the player who created this request.
	 *
	 * @param playerUUID The UUID of the player
	 */
	public void setPlayerUUID(UUID playerUUID) {
		this.playerUUID = playerUUID;
	}

	/**
	 * Gets the UUID of the player who created this request.
	 *
	 * @return The UUID of the player
	 */
	public UUID getPlayerUUID() {
		return this.playerUUID;
	}

	/**
	 * Sets the name of the player who created this request.
	 *
	 * @param playerName The player's name
	 */
	public void setPlayerName(String playerName) {
		this.playerName = playerName;
	}

	/**
	 * Gets the name of the player who created this request.
	 *
	 * @return The player's name
	 */
	public String getPlayerName() {
		return this.playerName;
	}

	/**
	 * Sets the UUID of the moderator assigned to this request.
	 *
	 * @param assignedModUUID The UUID of the assigned moderator
	 */
	public void setAssignedModUUID(UUID assignedModUUID) {
		this.assignedModUUID = assignedModUUID;
	}

	/**
	 * Gets the UUID of the moderator assigned to this request.
	 *
	 * @return The UUID of the assigned moderator
	 */
	public UUID getAssignedModUUID() {
		return this.assignedModUUID;
	}

	/**
	 * Sets the name of the moderator assigned to this request.
	 *
	 * @param assignedMod The name of the assigned moderator
	 */
	public void setAssignedMod(String assignedMod) {
		this.assignedMod = assignedMod;
	}

	/**
	 * Gets the name of the moderator assigned to this request.
	 *
	 * @return The name of the assigned moderator
	 */
	public String getAssignedMod() {
		return this.assignedMod;
	}

	/**
	 * Sets the content of this request.
	 *
	 * @param request The request content
	 */
	public void setRequest(String request) {
		this.request = request;
	}

	/**
	 * Gets the content of this request.
	 *
	 * @return The request content
	 */
	public String getRequest() {
		return this.request;
	}

	/**
	 * Sets the timestamp when this request was created.
	 *
	 * @param requestTime The creation timestamp (in milliseconds since epoch)
	 */
	public void setRequestTime(long requestTime) {
		this.requestTime = requestTime;
	}

	/**
	 * Gets the timestamp when this request was created.
	 *
	 * @return The creation timestamp (in milliseconds since epoch)
	 */
	public long getRequestTime() {
		return this.requestTime;
	}

	/**
	 * Sets the current status of this request.
	 *
	 * @param status The status to set
	 */
	public void setStatus(RequestStatus status) {
		this.status = status;
	}

	/**
	 * Gets the current status of this request.
	 *
	 * @return The current status
	 */
	public RequestStatus getStatus() {
		return this.status;
	}

	/**
	 * Sets the location information for this request.
	 *
	 * @param requestLocation The location string
	 */
	public void setRequestLocation(String requestLocation) {
		this.requestLocation = requestLocation;
	}

	/**
	 * Gets the location information for this request.
	 *
	 * @return The location string
	 */
	public String getRequestLocation() {
		return this.requestLocation;
	}

	/**
	 * Sets the closing message for this request.
	 *
	 * @param closeMessage The closing message
	 */
	public void setCloseMessage(String closeMessage) {
		this.closeMessage = closeMessage;
	}

	/**
	 * Gets the closing message for this request.
	 *
	 * @return The closing message
	 */
	public String getCloseMessage() {
		return this.closeMessage;
	}

	/**
	 * Sets the timestamp when this request was closed.
	 *
	 * @param closeTime The closing timestamp (in milliseconds since epoch)
	 */
	public void setCloseTime(long closeTime) {
		this.closeTime = closeTime;
	}

	/**
	 * Sets whether the user has seen the closing message.
	 *
	 * @param closeSeenByUser True if the user has seen the closing message, false otherwise
	 */
	public void setCloseSeenByUser(boolean closeSeenByUser) {
		this.closeSeenByUser = closeSeenByUser;
	}

	/**
	 * Sets whether this request is flagged for admin attention.
	 *
	 * @param flagForAdmin True if this request is flagged for admin attention, false otherwise
	 */
	public void setFlagForAdmin(boolean flagForAdmin) {
		this.flagForAdmin = flagForAdmin;
	}

	/**
	 * Checks if this request is flagged for admin attention.
	 *
	 * @return True if this request is flagged for admin attention, false otherwise
	 */
	public boolean isFlagForAdmin() {
		return this.flagForAdmin;
	}
}
